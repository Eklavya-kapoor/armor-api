# Docker Compose for Elephas AI with Real Data Stack
version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15
    container_name: elephas_postgres
    environment:
      POSTGRES_DB: elephas_ai
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_INITDB_ARGS: "--auth-host=md5"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/setup.sql:/docker-entrypoint-initdb.d/setup.sql
    networks:
      - elephas_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d elephas_ai"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: elephas_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - elephas_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Elephas AI API Server
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: elephas_api
    ports:
      - "8000:8000"
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=elephas_ai
      - DB_USER=postgres
      - DB_PASSWORD=password
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - VIRUSTOTAL_API_KEY=${VIRUSTOTAL_API_KEY:-}
      - ABUSEIPDB_API_KEY=${ABUSEIPDB_API_KEY:-}
      - PHISHTANK_API_KEY=${PHISHTANK_API_KEY:-}
    volumes:
      - ./scambert-model-v2:/app/scambert-model-v2
      - ./scamshield.log:/app/scamshield.log
    networks:
      - elephas_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # InfluxDB for Time Series Metrics (Optional)
  influxdb:
    image: influxdb:2.7
    container_name: elephas_influxdb
    ports:
      - "8086:8086"
    environment:
      - INFLUXDB_DB=elephas_metrics
      - INFLUXDB_ADMIN_USER=admin
      - INFLUXDB_ADMIN_PASSWORD=adminpass
      - INFLUXDB_USER=elephas
      - INFLUXDB_USER_PASSWORD=elephaspass
    volumes:
      - influxdb_data:/var/lib/influxdb2
    networks:
      - elephas_network
    restart: unless-stopped

  # Grafana for Advanced Analytics (Optional)
  grafana:
    image: grafana/grafana:latest
    container_name: elephas_grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_INSTALL_PLUGINS=grafana-worldmap-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - elephas_network
    depends_on:
      - influxdb
    restart: unless-stopped

  # Nginx Reverse Proxy (Optional - for production)
  nginx:
    image: nginx:alpine
    container_name: elephas_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    networks:
      - elephas_network
    depends_on:
      - api
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  influxdb_data:
    driver: local
  grafana_data:
    driver: local

networks:
  elephas_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
